=begin
#Web Forms API version 1.1

#The Web Forms API facilitates generating semantic HTML forms around everyday contracts. 

OpenAPI spec version: 1.1.0
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module DocuSign_WebForms
  # An object that contains the Web Form Instance required to render it  and its metadata such as created by, created time
  class WebFormInstance
    attr_accessor :form_url

    attr_accessor :instance_token

    attr_accessor :token_expiration_date_time

    attr_accessor :id

    # Web form from which the instance is created
    attr_accessor :form_id

    attr_accessor :account_id

    attr_accessor :client_user_id

    # List of tags provided by the user with each request. This field is optional.
    attr_accessor :tags

    attr_accessor :status

    # The associated envelope that is created when the instance is submitted
    attr_accessor :envelopes

    attr_accessor :instance_metadata

    attr_accessor :form_values

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'form_url' => :'formUrl',
        :'instance_token' => :'instanceToken',
        :'token_expiration_date_time' => :'tokenExpirationDateTime',
        :'id' => :'id',
        :'form_id' => :'formId',
        :'account_id' => :'accountId',
        :'client_user_id' => :'clientUserId',
        :'tags' => :'tags',
        :'status' => :'status',
        :'envelopes' => :'envelopes',
        :'instance_metadata' => :'instanceMetadata',
        :'form_values' => :'formValues'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'form_url' => :'String',
        :'instance_token' => :'String',
        :'token_expiration_date_time' => :'DateTime',
        :'id' => :'String',
        :'form_id' => :'String',
        :'account_id' => :'String',
        :'client_user_id' => :'String',
        :'tags' => :'Array<String>',
        :'status' => :'InstanceStatus',
        :'envelopes' => :'Array<WebFormInstanceEnvelopes>',
        :'instance_metadata' => :'WebFormInstanceMetadata',
        :'form_values' => :'WebFormValues'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'formUrl')
        self.form_url = attributes[:'formUrl']
      end

      if attributes.has_key?(:'instanceToken')
        self.instance_token = attributes[:'instanceToken']
      end

      if attributes.has_key?(:'tokenExpirationDateTime')
        self.token_expiration_date_time = attributes[:'tokenExpirationDateTime']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'formId')
        self.form_id = attributes[:'formId']
      end

      if attributes.has_key?(:'accountId')
        self.account_id = attributes[:'accountId']
      end

      if attributes.has_key?(:'clientUserId')
        self.client_user_id = attributes[:'clientUserId']
      end

      if attributes.has_key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.has_key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.has_key?(:'envelopes')
        if (value = attributes[:'envelopes']).is_a?(Array)
          self.envelopes = value
        end
      end

      if attributes.has_key?(:'instanceMetadata')
        self.instance_metadata = attributes[:'instanceMetadata']
      end

      if attributes.has_key?(:'formValues')
        self.form_values = attributes[:'formValues']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          form_url == o.form_url &&
          instance_token == o.instance_token &&
          token_expiration_date_time == o.token_expiration_date_time &&
          id == o.id &&
          form_id == o.form_id &&
          account_id == o.account_id &&
          client_user_id == o.client_user_id &&
          tags == o.tags &&
          status == o.status &&
          envelopes == o.envelopes &&
          instance_metadata == o.instance_metadata &&
          form_values == o.form_values
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [form_url, instance_token, token_expiration_date_time, id, form_id, account_id, client_user_id, tags, status, envelopes, instance_metadata, form_values].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DocuSign_WebForms.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
