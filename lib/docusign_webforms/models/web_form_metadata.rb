=begin
#Web Forms API version 1.1

#The Web Forms API facilitates generating semantic HTML forms around everyday contracts. 

OpenAPI spec version: 1.1.0
Contact: devcenter@docusign.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require 'date'

module DocuSign_WebForms
  # Form metadata
  class WebFormMetadata
    # The source from which the webform is created. Accepted values are [upload, templates, blank]
    attr_accessor :source

    # The user that created the form or has been transferred ownership
    attr_accessor :owner

    # The user that has added their consent to the form for sending actions
    attr_accessor :sender

    # Track the user that last modified anything related to the form
    attr_accessor :last_modified_by

    # Track the user that last modified the form content
    attr_accessor :form_content_modified_by

    # Track the user that last modified the form properties
    attr_accessor :form_properties_modified_by

    # Track the user that last published a draft version to active
    attr_accessor :last_published_by

    # Track the user that last unpublished an active version
    attr_accessor :last_enabled_by

    # Track the user that last unpublished an active version
    attr_accessor :last_disabled_by

    # The last time the web form was archived
    attr_accessor :archived_date_time

    # Track the time the web form was created
    attr_accessor :created_date_time

    # The last time anything was modified on the form
    attr_accessor :last_modified_date_time

    # Track the last time web form content changed.
    attr_accessor :form_content_modified_date_time

    # Track the last time the form properties changed.
    attr_accessor :form_properties_modified_date_time

    # Track the last time a draft version was published to active
    attr_accessor :last_published_date_time

    # Track the last time the form was enabled
    attr_accessor :last_enabled_date_time

    # Track the last time the form was disabled
    attr_accessor :last_disabled_date_time

    # Track the last time a user added their consent for the form.
    attr_accessor :last_sender_consent_date_time

    # The public friendly slug that is used to access the form from the player
    attr_accessor :published_slug

    # A dictionary containing the mapping of component names to their respective component types for all the published components.
    attr_accessor :published_component_names

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'source' => :'source',
        :'owner' => :'owner',
        :'sender' => :'sender',
        :'last_modified_by' => :'lastModifiedBy',
        :'form_content_modified_by' => :'formContentModifiedBy',
        :'form_properties_modified_by' => :'formPropertiesModifiedBy',
        :'last_published_by' => :'lastPublishedBy',
        :'last_enabled_by' => :'lastEnabledBy',
        :'last_disabled_by' => :'lastDisabledBy',
        :'archived_date_time' => :'archivedDateTime',
        :'created_date_time' => :'createdDateTime',
        :'last_modified_date_time' => :'lastModifiedDateTime',
        :'form_content_modified_date_time' => :'formContentModifiedDateTime',
        :'form_properties_modified_date_time' => :'formPropertiesModifiedDateTime',
        :'last_published_date_time' => :'lastPublishedDateTime',
        :'last_enabled_date_time' => :'lastEnabledDateTime',
        :'last_disabled_date_time' => :'lastDisabledDateTime',
        :'last_sender_consent_date_time' => :'lastSenderConsentDateTime',
        :'published_slug' => :'publishedSlug',
        :'published_component_names' => :'publishedComponentNames'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'source' => :'WebFormSource',
        :'owner' => :'WebFormUserInfo',
        :'sender' => :'WebFormUserInfo',
        :'last_modified_by' => :'WebFormUserInfo',
        :'form_content_modified_by' => :'WebFormUserInfo',
        :'form_properties_modified_by' => :'WebFormUserInfo',
        :'last_published_by' => :'WebFormUserInfo',
        :'last_enabled_by' => :'WebFormUserInfo',
        :'last_disabled_by' => :'WebFormUserInfo',
        :'archived_date_time' => :'DateTime',
        :'created_date_time' => :'DateTime',
        :'last_modified_date_time' => :'DateTime',
        :'form_content_modified_date_time' => :'DateTime',
        :'form_properties_modified_date_time' => :'DateTime',
        :'last_published_date_time' => :'DateTime',
        :'last_enabled_date_time' => :'DateTime',
        :'last_disabled_date_time' => :'DateTime',
        :'last_sender_consent_date_time' => :'DateTime',
        :'published_slug' => :'String',
        :'published_component_names' => :'Hash<String, WebFormComponentType>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'source')
        self.source = attributes[:'source']
      end

      if attributes.has_key?(:'owner')
        self.owner = attributes[:'owner']
      end

      if attributes.has_key?(:'sender')
        self.sender = attributes[:'sender']
      end

      if attributes.has_key?(:'lastModifiedBy')
        self.last_modified_by = attributes[:'lastModifiedBy']
      end

      if attributes.has_key?(:'formContentModifiedBy')
        self.form_content_modified_by = attributes[:'formContentModifiedBy']
      end

      if attributes.has_key?(:'formPropertiesModifiedBy')
        self.form_properties_modified_by = attributes[:'formPropertiesModifiedBy']
      end

      if attributes.has_key?(:'lastPublishedBy')
        self.last_published_by = attributes[:'lastPublishedBy']
      end

      if attributes.has_key?(:'lastEnabledBy')
        self.last_enabled_by = attributes[:'lastEnabledBy']
      end

      if attributes.has_key?(:'lastDisabledBy')
        self.last_disabled_by = attributes[:'lastDisabledBy']
      end

      if attributes.has_key?(:'archivedDateTime')
        self.archived_date_time = attributes[:'archivedDateTime']
      end

      if attributes.has_key?(:'createdDateTime')
        self.created_date_time = attributes[:'createdDateTime']
      end

      if attributes.has_key?(:'lastModifiedDateTime')
        self.last_modified_date_time = attributes[:'lastModifiedDateTime']
      end

      if attributes.has_key?(:'formContentModifiedDateTime')
        self.form_content_modified_date_time = attributes[:'formContentModifiedDateTime']
      end

      if attributes.has_key?(:'formPropertiesModifiedDateTime')
        self.form_properties_modified_date_time = attributes[:'formPropertiesModifiedDateTime']
      end

      if attributes.has_key?(:'lastPublishedDateTime')
        self.last_published_date_time = attributes[:'lastPublishedDateTime']
      end

      if attributes.has_key?(:'lastEnabledDateTime')
        self.last_enabled_date_time = attributes[:'lastEnabledDateTime']
      end

      if attributes.has_key?(:'lastDisabledDateTime')
        self.last_disabled_date_time = attributes[:'lastDisabledDateTime']
      end

      if attributes.has_key?(:'lastSenderConsentDateTime')
        self.last_sender_consent_date_time = attributes[:'lastSenderConsentDateTime']
      end

      if attributes.has_key?(:'publishedSlug')
        self.published_slug = attributes[:'publishedSlug']
      end

      if attributes.has_key?(:'publishedComponentNames')
        if (value = attributes[:'publishedComponentNames']).is_a?(Hash)
          self.published_component_names = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          source == o.source &&
          owner == o.owner &&
          sender == o.sender &&
          last_modified_by == o.last_modified_by &&
          form_content_modified_by == o.form_content_modified_by &&
          form_properties_modified_by == o.form_properties_modified_by &&
          last_published_by == o.last_published_by &&
          last_enabled_by == o.last_enabled_by &&
          last_disabled_by == o.last_disabled_by &&
          archived_date_time == o.archived_date_time &&
          created_date_time == o.created_date_time &&
          last_modified_date_time == o.last_modified_date_time &&
          form_content_modified_date_time == o.form_content_modified_date_time &&
          form_properties_modified_date_time == o.form_properties_modified_date_time &&
          last_published_date_time == o.last_published_date_time &&
          last_enabled_date_time == o.last_enabled_date_time &&
          last_disabled_date_time == o.last_disabled_date_time &&
          last_sender_consent_date_time == o.last_sender_consent_date_time &&
          published_slug == o.published_slug &&
          published_component_names == o.published_component_names
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [source, owner, sender, last_modified_by, form_content_modified_by, form_properties_modified_by, last_published_by, last_enabled_by, last_disabled_by, archived_date_time, created_date_time, last_modified_date_time, form_content_modified_date_time, form_properties_modified_date_time, last_published_date_time, last_enabled_date_time, last_disabled_date_time, last_sender_consent_date_time, published_slug, published_component_names].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = DocuSign_WebForms.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
